{"version":3,"sources":["components/GameCard/index.js","components/Wrapper/index.js","components/NavMessage/index.js","components/TopNav/index.js","components/JumbotronInstructions/index.js","components/Game/index.js","App.js","serviceWorker.js","index.js"],"names":["GameCard","props","react_default","a","createElement","Card_default","className","style","width","onClick","handleClick","id","Img","src","image","alt","ImgOverlay","Wrapper","children","NavMessage","state","message","animating","renderMessage","_this","_this2","this","score","_ref","topScore","newState","setState","setTimeout","Component","TopNav","Navbar_default","bg","variant","Brand","href","Nav_default","components_NavMessage","JumbotronInstructions","Jumbotron_default","Game","data","resetData","map","item","Object","objectSpread","clicked","shuffleCards","handleCorrect","newData","_this$state","newScore","newTopScore","handleWrongGuess","i","length","j","Math","floor","random","temp","guessedCorrectly","newItem","components_TopNav","components_Wrapper","components_JumbotronInstructions","components_GameCard","key","App","components_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.09fc1307.chunk.js","sourcesContent":["import React from \"react\";\nimport Card from \"react-bootstrap/Card\";\n\nconst GameCard = props => \n    // console.log(props);\n  (\n    <Card \n      className=\"bg-dark text-white shadow m-2\" \n      style={{ width: '9rem'}}\n      onClick = {() => props.handleClick(props.id)}>\n    <Card.Img src={props.image} alt={props.id} />\n    <Card.ImgOverlay>\n      {/* <Card.Text>\n        Card {props.id}\n      </Card.Text> */}\n    </Card.ImgOverlay>\n    </Card>\n  );\n\n\nexport default GameCard;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React, { Component } from \"react\";\r\nimport \"./style.css\";\r\n\r\nclass NavMessage extends Component {\r\n    state = {\r\n        message: \"\",\r\n        animating: false\r\n    };\r\n\r\n    componentWillReceiveProps({ score, topScore }) {\r\n        let newState = {animating: true};\r\n        if (score === 0 && topScore === 0) {\r\n            newState.message = \"\";\r\n        } else if (score === 0 && topScore > 0) {\r\n            newState.message = \"incorrect\";\r\n        } else {\r\n            newState.message = \"correct\";\r\n        }\r\n        this.setState(newState, () => \r\n            setTimeout(() => this.setState({ animating: false}),500)\r\n        );\r\n    }\r\n    \r\n    renderMessage = () => {\r\n        switch (this.state.message) {\r\n            case \"correct\":\r\n                return \"You guessed correctly!\";\r\n            case \"incorrect\" :\r\n                return \"You guessed incorrectly!\";\r\n            default:\r\n                return \"Click an image to begin!\";\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <li className={this.state.animating ? this.state.message : \"\"}>\r\n                {this.renderMessage()}\r\n            </li>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default NavMessage;","import React from \"react\";\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport NavMessage from \"../NavMessage\"\r\nimport \"./style.css\";\r\n\r\nconst TopNav = props => (\r\n    <Navbar bg=\"dark\" variant=\"dark\">\r\n      <Navbar.Brand href=\"/\">Clicky Game</Navbar.Brand>\r\n      <Nav className=\"mr-auto\">\r\n        {/* <Nav.Link>Click an image to begin!</Nav.Link> */}\r\n        <NavMessage score = {props.score} topScore = {props.topScore}  />\r\n\r\n      </Nav>\r\n      <Nav className=\"mr-auto scoreArea\">\r\n\r\n        <li>Score: {props.score} | Top Score: {props.topScore}</li>\r\n      </Nav>\r\n    </Navbar>\r\n  );\r\n\r\n\r\nexport default TopNav;\r\n","import React from \"react\";\r\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\r\nimport \"./style.css\";\r\n\r\nfunction JumbotronInstructions() {\r\n    return (\r\n        <Jumbotron>\r\n        <h2>Clicky Game!</h2>\r\n        <p>\r\n          Click on an image to earn points, but don't click on any more than\r\n          once!\r\n        </p>\r\n      </Jumbotron>\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default JumbotronInstructions;\r\n","import React, { Component } from \"react\";\r\nimport \"./style.css\";\r\nimport GameCard from \"../GameCard\";\r\nimport data from \"../../data.json\"\r\nimport Wrapper from \"../Wrapper\";\r\nimport TopNav from \"../TopNav\";\r\nimport JumbotronInstructions from \"../JumbotronInstructions\";\r\n\r\nclass Game extends Component {\r\n\r\n  state = {\r\n    data,\r\n    score: 0,\r\n    topScore: 0\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setState({ data: this.shuffleCards(this.state.data)});\r\n  }\r\n\r\n  resetData = data => {\r\n    // spread syntax ...\r\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax\r\n    // set everything back to clicked : false\r\n    const resetData = data.map(item => ({ ...item, clicked: false }));\r\n    return this.shuffleCards(resetData);\r\n  }\r\n\r\n  handleCorrect = newData => {\r\n    const {topScore, score} = this.state;\r\n    const newScore = score + 1;\r\n    const newTopScore = newScore > topScore ? newScore : topScore;\r\n    this.setState({\r\n      data: this.shuffleCards(newData),\r\n      score: newScore,\r\n      topScore: newTopScore\r\n    });\r\n  };\r\n\r\n  handleWrongGuess = data => {\r\n    this.setState({\r\n      data: this.resetData(data),\r\n      score: 0\r\n    });\r\n  };\r\n\r\n  // shuffle cards by randomly generating new indexes for each element and replacing the original set\r\n  shuffleCards = data => {\r\n    let i = data.length - 1;\r\n    while (i > 0 ) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      const temp = data[i];\r\n      data[i] = data[j];\r\n      data[j] = temp;\r\n      i--;\r\n    }\r\n    return data;\r\n  };\r\n\r\n  handleClick = id => {\r\n    let guessedCorrectly = false;\r\n    const newData = this.state.data.map(item => {\r\n      const newItem = { ...item};\r\n      if (newItem.id === id) {\r\n        if (!newItem.clicked) {\r\n          newItem.clicked = true;\r\n          guessedCorrectly = true;\r\n        }\r\n    }\r\n    return newItem;\r\n    });\r\n    guessedCorrectly ? this.handleCorrect(newData) : this.handleWrongGuess(newData);\r\n  }\r\n\r\nrender() {\r\n  return (\r\n    <div>\r\n      <TopNav score = {this.state.score} topScore = {this.state.topScore}/>\r\n      <Wrapper>\r\n      <JumbotronInstructions/>\r\n      <div className = \"gameArea\">\r\n    {this.state.data.map(item => (\r\n        <GameCard \r\n          key={item.id} \r\n          image={item.image} \r\n          id={item.id}\r\n          handleClick={this.handleClick} />\r\n      ))}\r\n    </div>      \r\n\r\n    </Wrapper>\r\n    </div>\r\n\r\n  );\r\n}\r\n}\r\nexport default Game;\r\n\r\n\r\n\r\n","import React from \"react\";\nimport Game from \"./components/Game\";\n\n\nconst App = () => <Game />;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}