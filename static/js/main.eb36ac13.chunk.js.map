{"version":3,"sources":["../../src/components/Wrapper/index.js","../../src/components/GameCard/index.js","../../src/components/GameArea/index.js","../../src/App.js","../../src/serviceWorker.js","../../src/index.js"],"names":["Wrapper","props","react_default","a","createElement","className","children","GameCard","console","log","Card_default","style","width","Img","src","image","alt","id","ImgOverlay","Text","GameArea","pics","map","item","components_GameCard","App","Navbar_default","bg","variant","Brand","href","Nav_default","Link","Jumbotron_default","Button_default","components_Wrapper","components_GameArea","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qhEAOeA,MAJf,SAAiBC,GACf,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMK,sGCe1BC,MAff,SAAkBN,GAGhB,OAFAO,QAAQC,IAAIR,GAGVC,EAAAC,EAAAC,cAACM,EAAAP,EAAD,CAAME,UAAU,gCAAgCM,MAAO,CAAEC,MAAO,UAChEV,EAAAC,EAAAC,cAACM,EAAAP,EAAKU,IAAN,CAAUC,IAAKb,EAAMc,MAAOC,IAAKf,EAAMgB,KACvCf,EAAAC,EAAAC,cAACM,EAAAP,EAAKe,WAAN,KACEhB,EAAAC,EAAAC,cAACM,EAAAP,EAAKgB,KAAN,aACQlB,EAAMgB,eCKLG,MAXf,SAAkBnB,GAEhB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAY,YAClBgB,EAAKC,IAAI,SAAAC,GAAI,OACVrB,EAAAC,EAAAC,cAACoB,EAAD,CAAUT,MAAOQ,EAAKR,MAAOE,GAAIM,EAAKN,SCgC/BQ,MAlCf,WACE,OACEvB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACsB,EAAAvB,EAAD,CAAQwB,GAAG,OAAOC,QAAQ,QACxB1B,EAAAC,EAAAC,cAACsB,EAAAvB,EAAO0B,MAAR,CAAcC,KAAK,SAAnB,eACA5B,EAAAC,EAAAC,cAAC2B,EAAA5B,EAAD,CAAKE,UAAU,WACbH,EAAAC,EAAAC,cAAC2B,EAAA5B,EAAI6B,KAAL,kCAEF9B,EAAAC,EAAAC,cAAC2B,EAAA5B,EAAD,CAAKE,UAAU,WACbH,EAAAC,EAAAC,cAAC2B,EAAA5B,EAAI6B,KAAL,iBADF,KACiC9B,EAAAC,EAAAC,cAAC2B,EAAA5B,EAAI6B,KAAL,uBAInC9B,EAAAC,EAAAC,cAAC6B,EAAA9B,EAAD,KACED,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,qFAIAF,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAC8B,EAAA/B,EAAD,CAAQyB,QAAQ,WAAhB,gBAGJ1B,EAAAC,EAAAC,cAAC+B,EAAD,KACAjC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACgC,EAAD,OAFJ,OCpBcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.eb36ac13.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport Card from \"react-bootstrap/Card\";\n// import \"./style.css\";\n\nfunction GameCard(props) {\n  console.log(props);\n\n  return (\n    <Card className=\"bg-dark text-white shadow m-2\" style={{ width: '10rem'}}>\n    <Card.Img src={props.image} alt={props.id} />\n    <Card.ImgOverlay>\n      <Card.Text>\n        Card {props.id}\n      </Card.Text>\n    </Card.ImgOverlay>\n    </Card>\n  );\n}\n\nexport default GameCard;\n","import React from \"react\";\r\nimport \"./style.css\";\r\nimport GameCard from \"../GameCard\";\r\nimport pics from \"../../cards.json\"\r\n\r\n\r\nfunction GameArea(props) {\r\n\r\n  return (\r\n      <div className = \"gameArea\">\r\n    {pics.map(item => (\r\n        <GameCard image={item.image} id={item.id} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GameArea;\r\n\r\n\r\n\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Wrapper from \"./components/Wrapper\";\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport Button from \"react-bootstrap/Button\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Nav from \"react-bootstrap/Nav\";\nimport GameArea from \"./components/GameArea\"\n\nfunction App() {\n  return (\n    <div>\n      <Navbar bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand href=\"#home\">Clicky Game</Navbar.Brand>\n        <Nav className=\"mr-auto\">\n          <Nav.Link>Click an image to begin!</Nav.Link>\n        </Nav>\n        <Nav className=\"mr-auto\">\n          <Nav.Link>Score: 0</Nav.Link> |<Nav.Link>Top Score: 0</Nav.Link>\n        </Nav>\n      </Navbar>\n      \n      <Jumbotron>\n        <h1>Clicky Game!</h1>\n        <p>\n          Click on an image to earn points, but don't click on any more than\n          once!\n        </p>\n        <p>\n          <Button variant=\"primary\">Learn more</Button>\n        </p>\n      </Jumbotron>\n      <Wrapper>\n      <div>\n          <GameArea/>\n      </div>\n\n      ;\n    </Wrapper>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}